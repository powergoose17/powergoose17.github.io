{"version":3,"sources":["Logo.js","Nav.js","Shop.js","About.js","Home.js","ItemDetail.js","App.js","serviceWorker.js","index.js"],"names":["Logo","history","useHistory","onClick","push","Nav","navStyle","color","className","style","to","Shop","useEffect","fetchItems","useState","units","setUnits","a","fetch","response","json","items","console","log","data","map","key","itemId","item","name","About","Home","ItemDetail","match","fetchItem","images","unit","setUnit","params","id","src","background","width","height","alt","description","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAmBeA,EAhBF,WACX,IAAMC,EAAUC,cAMhB,OACE,6BACM,4BAASC,QANjB,WACEF,EAAQG,KAAR,WAKM,U,OCSKC,MAhBf,WACI,IAAMC,EAAW,CAACC,MAAO,SAEzB,OACI,6BACI,kBAAC,EAAD,MAEA,wBAAIC,UAAU,aACV,4BAAI,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,SAA1B,SACJ,4BAAI,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,UAA1B,UACJ,4BAAI,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,SAA1B,Y,gCCkBLC,MA5Bf,WACEC,qBAAU,WACRC,MACC,IAHW,MAKYC,mBAAS,IALrB,mBAKPC,EALO,KAKAC,EALA,KAORH,EAAU,uCAAG,8BAAAI,EAAA,sEACMC,MAAM,uDADZ,cACXC,EADW,gBAGGA,EAASC,OAHZ,OAGXC,EAHW,OAKjBC,QAAQC,IAAI,mBAAoBF,EAAMG,MACtCR,EAASK,EAAMG,MANE,2CAAH,qDAUhB,OACE,6BACKT,EAAMU,KAAI,SAAAD,GAAI,OACb,wBAAIE,IAAKF,EAAKG,QACZ,kBAAC,IAAD,CAAMjB,GAAE,gBAAWc,EAAKG,SAAWH,EAAKI,KAAKC,YChB1CC,MARf,WACE,OACE,6BACI,4CCKOC,EARF,WACT,OACE,6BACI,2CC6BKC,MAhCf,YAA8B,IAATC,EAAQ,EAARA,MACnBrB,qBAAU,WACRsB,IACAZ,QAAQC,IAAI,UAAWU,KACtB,IAJwB,MAMHnB,mBAAS,CAC7BqB,OAAQ,KAPe,mBAMpBC,EANoB,KAMdC,EANc,KAUrBH,EAAS,uCAAG,8BAAAjB,EAAA,sEACOC,MAAM,sDAAD,OAAuDe,EAAMK,OAAOC,KADhF,cACVpB,EADU,gBAGGA,EAASC,OAHZ,OAGVQ,EAHU,OAKhBN,QAAQC,IAAI,SAAUJ,GACtBG,QAAQC,IAAI,SAAUK,GACtBN,QAAQC,IAAI,cAAeK,EAAKJ,MAChCF,QAAQC,IAAI,mBAAoBK,EAAKJ,KAAKI,MAE1CS,EAAQT,EAAKJ,KAAKI,MAVF,4CAAH,qDAaf,OACE,6BACI,4BAAKQ,EAAKP,MACV,yBAAKW,IAAKJ,EAAKD,OAAOM,WAAYC,MAAM,MAAMC,OAAO,MAAMC,IAAI,KAC/D,4BAAKR,EAAKS,eCHHC,MAjBf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuC,KAAK,IAAIC,OAAK,EAACC,UAAWlB,IACjC,kBAAC,IAAD,CAAOgB,KAAK,QAAQC,OAAK,EAACC,UAAWlB,IACrC,kBAAC,IAAD,CAAOgB,KAAK,SAASE,UAAWnB,IAChC,kBAAC,IAAD,CAAOiB,KAAK,QAAQC,OAAK,EAACC,UAAWtC,IACrC,kBAAC,IAAD,CAAOoC,KAAK,YAAYE,UAAWjB,QCPzBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.8b23102c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Logo = () => {\r\n  const history = useHistory();\r\n\r\n  function goHome() {\r\n    history.push(`/Home`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n          <button  onClick={goHome}>\r\n              Logo\r\n          </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo","import React from 'react';\r\nimport './App.css';\r\nimport Logo from './Logo';\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Nav() {\r\n    const navStyle = {color: 'White'};\r\n\r\n    return (\r\n        <nav>\r\n            <Logo />\r\n\r\n            <ul className=\"nav-links\">\r\n                <li><Link style={navStyle} to=\"/home\">Home</Link></li>                \r\n                <li><Link style={navStyle} to=\"/about\">About</Link></li>\r\n                <li><Link style={navStyle} to=\"/shop\">Shop</Link></li>\r\n            </ul>\r\n        </nav>\r\n        );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction Shop() {\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  const [units, setUnits] = useState([]);\r\n\r\n  const fetchItems = async () => {\r\n    const response = await fetch('https://fortnite-api.theapinetwork.com/upcoming/get');\r\n\r\n    const items = await response.json();\r\n\r\n    console.log(\"SHOP:ITEM.DATA: \", items.data);\r\n    setUnits(items.data);\r\n    //console.log(units);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        {units.map(data => (\r\n          <h1 key={data.itemId}>\r\n            <Link to={`/shop/${data.itemId}`}>{data.item.name}</Link>\r\n          </h1>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Shop;\r\n","import React from 'react';\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n        <h1>About Page</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react'\r\n\r\nconst Home = () => {\r\n    return (\r\n      <div>\r\n          <h1>Home Page</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Home","import React, { useState, useEffect } from 'react';\r\n\r\nfunction ItemDetail({match}) {\r\n  useEffect(() => {\r\n    fetchItem();\r\n    console.log(\"MATCH: \", match)\r\n  }, []);\r\n\r\n  const [unit, setUnit] = useState({\r\n      images: {}\r\n  });\r\n\r\n  const fetchItem = async () => {\r\n    const response = await fetch(`https://fortnite-api.theapinetwork.com/item/get?id=${match.params.id}`);\r\n\r\n    const item = await response.json();\r\n\r\n    console.log(\"RESP: \", response);\r\n    console.log(\"ITEM: \", item);\r\n    console.log(\"ITEM.DATA: \", item.data);\r\n    console.log(\"ITEM.DATA.ITEM: \", item.data.item);\r\n        \r\n    setUnit(item.data.item);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <h1>{unit.name}</h1>\r\n        <img src={unit.images.background} width=\"200\" height=\"300\" alt=\"\" />\r\n        <h2>{unit.description}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemDetail;\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport Shop from './Shop';\nimport About from './About';\nimport Home from './Home'\nimport ItemDetail from './ItemDetail';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/home\" exact component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/shop\" exact component={Shop} />\n          <Route path=\"/shop/:id\" component={ItemDetail} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}